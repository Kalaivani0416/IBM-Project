# -*- coding: utf-8 -*-
"""HealthAI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJ_fQACLZtLTqnFqcbk2zr0FWToUl1uy
"""

!pip install transformers torch gradio -q

# Import libraries
import gradio as gr
import torch
import matplotlib.pyplot as plt
import numpy as np
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure tokenizer has pad token
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Function to generate AI response
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            top_p=0.9,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# -------------------------------
# Function: Health Analytics Dashboard
# -------------------------------
def health_dashboard():
    days = np.arange(1, 91)

    # Fake sample data
    heart_rate = 70 + 10*np.sin(days/10) + np.random.randn(90)*2
    systolic = 120 + 5*np.sin(days/15) + np.random.randn(90)*2
    diastolic = 80 + 5*np.cos(days/18) + np.random.randn(90)*2
    glucose = 100 + 8*np.sin(days/12) + np.random.randn(90)*3

    fig, axs = plt.subplots(2, 2, figsize=(10, 6))

    # Heart Rate
    axs[0,0].plot(days, heart_rate, label="Heart Rate (bpm)")
    axs[0,0].set_title("Heart Rate Trend (90 Days)")
    axs[0,0].legend()

    # Blood Pressure
    axs[0,1].plot(days, systolic, color="red", label="Systolic")
    axs[0,1].plot(days, diastolic, color="blue", label="Diastolic")
    axs[0,1].set_title("Blood Pressure Trend (90 Days)")
    axs[0,1].legend()

    # Glucose
    axs[1,0].plot(days, glucose, label="Blood Glucose (mg/dL)", color="green")
    axs[1,0].set_title("Blood Glucose Trend (90 Days)")
    axs[1,0].legend()

    # Symptoms Pie
    labels = ["Cough", "Fever", "Headache", "Fatigue", "Other"]
    values = [20, 15, 25, 10, 30]
    axs[1,1].pie(values, labels=labels, autopct='%1.1f%%')
    axs[1,1].set_title("Symptom Frequency")

    plt.tight_layout()
    return fig

# -------------------------------
# Function: Disease prediction
# -------------------------------
def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize consulting a doctor.\n\nSymptoms: {symptoms}\n\nResponse:"
    return generate_response(prompt, max_length=800)

# -------------------------------
# Function: Treatment plan
# -------------------------------
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate a simple treatment suggestion for this patient.\n\nCondition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nResponse:"
    return generate_response(prompt, max_length=1000)

# -------------------------------
# Function: Patient Chat
# -------------------------------
def patient_chat(patient_message):
    prompt = f"Patient says: {patient_message}\n\nAs a healthcare assistant, respond politely with general advice and recommend seeing a doctor if serious."
    return generate_response(prompt, max_length=500)

# -------------------------------
# Gradio Interface
# -------------------------------
with gr.Blocks() as app:
    gr.Markdown("# üè• HealthAI - Intelligent Healthcare Assistant")
    gr.Markdown("*Disclaimer: Informational only. Always consult doctors for real medical advice.*")

    with gr.Tabs():
        # Dashboard
        with gr.TabItem("üìä Health Analytics Dashboard"):
            gr.Plot(health_dashboard)

        # Patient Chat
        with gr.TabItem("üí¨ Patient Chat"):
            chat_in = gr.Textbox(label="Your Symptoms / Question", placeholder="E.g., I have fever and cough for 2 days")
            chat_out = gr.Textbox(label="AI Response")
            chat_btn = gr.Button("Send")
            chat_btn.click(patient_chat, inputs=chat_in, outputs=chat_out)

        # Disease Prediction
        with gr.TabItem("üßæ Disease Prediction"):
            symptoms_input = gr.Textbox(label="Enter Symptoms", lines=5, placeholder="fever, cough, headache...")
            predict_btn = gr.Button("Analyze Symptoms")
            prediction_output = gr.Textbox(label="Possible Conditions", lines=15)
            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        # Treatment Plans
        with gr.TabItem("üíä Treatment Plans"):
            condition_input = gr.Textbox(label="Medical Condition")
            age_input = gr.Number(label="Age", value=30)
            gender_input = gr.Dropdown(label="Gender", choices=["Male", "Female", "Other"])
            history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions or None")
            plan_btn = gr.Button("Generate Treatment Plan")
            plan_output = gr.Textbox(label="Treatment Plan", lines=15)
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

# Launch app
app.launch(share=True)